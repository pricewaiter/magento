#!/usr/bin/env php
<?php

require_once(__DIR__ . '/_xml.php');

$VERSION = _pw_get_version();
$RELEASE_NOTES = _pw_get_release_notes();

$PUBLIC_REMOTE = 'public-repo';
$PUBLIC_BRANCH = 'master';

# 1. Pull in latest from public repo
system('git fetch ' . escapeshellarg($PUBLIC_REMOTE), $code);
if ($code !== 0) {
    echo <<<END
Remote $PUBLIC_REMOTE not set up. Please add it and try again.


END;
    exit($code);
}

# 2. Check out (in detached head state) the lastest from public repo
system(
    'git checkout ' .
    escapeshellarg("$PUBLIC_REMOTE/$PUBLIC_BRANCH"),
    $code
);

# 3. Squash merge master onto our temporary branch
system('git merge --squash master');

# 3a. Remove files that don't make sense to push publically.
$filesToMonkeyWith = [
    'README.md' => false,
    'README-public.md' => 'README.md'
];
foreach($filesToMonkeyWith as $file => $action) {
    if ($action === false) {
        system('git rm ' . escapeshellarg($file));
    } else {
        system('git mv ' . escapeshellarg($file) . ' ' . escapeshellarg($action));
    }
}

$commitMessage = "v$VERSION

$RELEASE_NOTES";
system('git commit -m ' . escapeshellarg($commitMessage));

echo "About to push to public repo. Continue (y/n)? ";
$resp = readline();
if ($resp === 'y' || $resp === 'Y') {

    # 4. Push temp branch to public repo
    system(implode(' ', [
        'git push',
        escapeshellarg($PUBLIC_REMOTE),
        escapeshellarg("HEAD:$PUBLIC_BRANCH")
    ]));

} else {
    echo "Ok, forget it then.\n";
}

# 4. Switch back to master + remove temp branch
system('git checkout master');
